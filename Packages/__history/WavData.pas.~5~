unit WavData;

interface

uses MyType;

type

  TDisplayedData = record
    Min, Max: TArrayInt;
  end;

  TSimpleWavHead = packed record
    RIFF: array [0 .. 3] of AnsiChar;
    RIFFcksize: UInt32;
    WaveID: array [0 .. 3] of AnsiChar;
    FormatCkID: array [0 .. 3] of AnsiChar;
    FormatCkSize: UInt32;
    wFormatTag: UInt16;
    wChannels: UInt16;
    dwSamplesPerSec: UInt32;
    dwAvgBytesPerSec: UInt32;
    wBlockAlign: UInt16;
    wBitsPerSample: UInt16;
    DataID: array [0 .. 3] of AnsiChar;
    DataSize: UInt32;
  end;

  TWavData = class
  private
    FFileName: String;
    FHead: TSimpleWavHead;
    FData: TArrayInt;
    FCanals: TArrayArrayReal;
    FSamplesCount: Integer;
    FFileOpened: boolean;

  public
    constructor Create;
    destructor Destroy;

    property Head: TSimpleWavHead read FHead;
    property Data: TArrayInt read FData;
    property SamplesCount: Integer read FSamplesCount;

    property FileOpened: boolean read FFileOpened;

    procedure OpenFile(AFileName: String);

    procedure ReadWave;
    procedure GetDisplayedData(var DisplayedData: TDisplayedData; NewLength: integer;
      InterpolationMode: integer = 0);
  end;

implementation

uses
  System.Classes;

{$REGION 'Вспомогательные процедуры и функции'}

function Sinc(x: Extended): Extended;
begin
  If x <> 0 then
    Result := Sin(x) / (x)
  else
    Result := 1;
end;

function InterpolationLine(t: Real; a0, a1: Real): Real; Overload;
begin
  Result := a0 * (1 - t) + a1 * t;
end;

function InterpolationLine(t: Real; A: TArrayReal): Real; Overload;
begin
  If Length(A) = 2 then
    InterpolationLine(t, A[0], A[1]);
end;

function InterpolationQuadratic(t: Real; a0, a1, a2: Real): Real; Overload;
begin
  {
    f=c2*t^2+c1*t+c0;
    t=0.0, f==a0;
    t=1.0, f==a1;
    t=2.0, f==a2; }
  { решение
    1.
    c0=a0;
    c2+c1+c0=a1;
    c2*4+c1*2+c0=a2;
    2.
    c0=a0;
    3.
    c2+c1=a1-a0;
    c2*4+c1*2=a2-a0;
    4.
    c2*2+c1*2=2*(a1-a0);
    c2*4+c1*2=a2-a0;
    5.
    c2*2=a2-a0-2*a1+2*a0
    6.
    c2=0.5*(a2-2*a1+a0)
    7.
    c1=0.5*(a2-a0-2(a2-2*a1+a0))
    8.
    c1=0.5*(-a2+4*a1-3*a0)

    c0=a0;
    c1=0.5*(-a2+4*a1-3*a0);
    c2=0.5*(a2-2*a1+a0);
  }
  Result := 0.5 * (a2 - 2 * a1 + a0) * t * t + 0.5 * (a2 - 2 * a1 + a0)
    * t + a0;
end;

function InterpolationQuadratic(t: Real; A: TArrayReal): Real; Overload;
begin
  If Length(A) = 3 then
    // InterpolationCube(t,A[0],A[1],A[2]);
end;

function InterpolationCubic(t: Real; a0, a1, a2: Real): Real; Overload;
begin
  {
    f=c3*t^3+c2*t^2+c1*t+c0;
    t=0.0, f==a0;
    t=1.0, f==a1;
    t=2.0, f==a2;
    t=3.0, f==a3; }
  { решение по методу Гауса
    1.
    c0=a0;
    c3+c2+c1+c0=a1;
    c3*8+c2*4+c1*2+c0=a2;
    c3*27+c2*9+c1*3+c0=a3;
    2.
    c0=a0;
    3.
    c3+c2+c1=a1-a0;
    c3*8+c2*4+c1*2=a2-a0;
    c3*27+c2*9+c1*3=a3-a0;
    4.
    c3+c2+c1=a1-a0;
    -c2*4-c1*6=a2-8*a1-9*a0;
    -c2*18-c1*24=a3-27*a1-28*a0;
    5.
    c3+c2+c1=a1-a0;
    -c2*4-c1*6=a2-8*a1-9*a0;
    +c1*3=a3-a2*4.5+9*a1+12.5*a0;

    6.
    c1=1/3*(a3-a2*4.5+9*a1+12.5*a0)
    c1=1/3*a3-a2*4.5+9*a1+12.5*a0)
    7.
    -c2*4-c1*6=a2-8*a1-9*a0;
    +c1*6=2*a3-a2*9+18*a1+25*a0;
    8.
    -c2*4=2*a3-8*a2-10*a1+16*a0
    c2*4=-2*a3+8*a2+10*a1-16*a0
    c2*2=-a3+4*a2+5*a1-8*a0
    c2=-0.5*a3+2*a2+2.5*a1-4*a0
    9.
    c3+c2+c1=a1-a0;
    c3=a1-a0+0.5*a3-2*a2-2.5^a1+4*a0-1/3*(a3-a2*4.5+9*a1+12.5*a0);
    c3=1/6*a3-0.5*a2-4.5*a1-3.5/3*a0;
  }
  // Result:=(1/6*a3-0.5*a2-4.5*a1-3.5/3*a0)*t*t*t+(-0.5*a3+2*a2+2.5*a1-4*a0)*t*t+1/3*(a3-a2*4.5+9*a1+12.5*a0)*t+a0;
end;

function InterpolationCubic(t: Real; A: TArrayReal): Real; Overload;
begin
  If Length(A) = 3 then
    // InterpolationCube(t,A[0],A[1],A[2]);
end;

procedure InterpolationSinC(var OutA: TArrayInt; InA: TArrayInt);
var
  i, j, k: integer;
  dT, F, t, sr: Real;
  FactorSize: Real;
  OldLength, NewLength: integer;
begin
  { Переписать через FFT }
  OldLength := Length(InA);
  NewLength := Length(OutA);
  if (OldLength = 0) then
    exit;

  FactorSize := (NewLength - 1) / (OldLength - 1);
  dT := 1 / FactorSize;
  For j := 0 to NewLength - 1 do
  begin
    sr := 0;
    F := 0;
    For k := -32767 to 32767
      do { массив Smallint при переборее за 32767 вклад будет меньше единицы }
    begin
      i := round(j * dT + k);
      t := (j * dT - i);
      sr := sr + Sinc(Pi * t) * InA[((i mod OldLength) + OldLength)
        mod OldLength]; { Метод SinC предпологает цикличность }
      F := F + (Sinc(Pi * t));
    end;
    if sr > 32767 then
      OutA[j] := 32767
    else if sr < -32768 then
      OutA[j] := -32768
    else
      OutA[j] := round(sr / F);
  end;
end;

procedure ReSizeArray(var OutA: TArrayInt; InA: TArrayInt; NewLength: integer;
  InterpolationMode: integer = 0);
var
  OldLength: integer;
  dT, F: Real;
  t: Real;
  FactorSize: Real;
  i, j: integer;
  S: Int64;
begin

  OldLength := Length(InA);

  FactorSize := (NewLength - 1) / (OldLength - 1);
  SetLength(OutA, NewLength);

  if FactorSize < 1 then { Уменьшаем }
  begin
    { Метод подсчёта среднего по n=OldLength/NewLength }
    { На крае при подсчёте среднего используется линейное интерполирование }
    dT := FactorSize;
    S := 0;
    t := 0;
    j := 0;
    i := 0;
    While i <= OldLength do
    begin
      if t + dT > 1 then
      begin
        OutA[j] := round(S * dT + InA[i] * (1 - t));
        Inc(j);
        t := t + dT - 1;
        S := round(InA[i] * t);
      end
      else
      begin
        S := S + InA[i];
        t := t + dT;
      end;
      Inc(i);
    end;
  end
  else { FactorSize>1 } { Увеличиваем }
  begin
    case InterpolationMode of
      0: { Метод ближайшего соседа. }
        begin
          dT := 1 / FactorSize;
          for j := 0 to NewLength - 1 do
          begin
            OutA[j] := InA[round(j * dT)];
          end;
        end;
      1: { Линейное интерполирование }
        begin
          dT := 1 / FactorSize;
          for j := 0 to NewLength - 2 do
          begin
            t := j * dT;
            i := Trunc(t);
            F := Frac(t);
            OutA[j] := round((1 - F) * InA[i] + F * InA[i + 1]);
          end;
          j := NewLength - 1;
          t := j * dT;
          i := Trunc(t);
          F := Frac(t);
          OutA[j] := round((1 - 0) * InA[i]);
        end;
      2: { SinC }
        begin
          InterpolationSinC(OutA, InA);     // Не оптимизирован под диапазон, работать не будет!!!
        end;
      3: { Кубический }
        ;
    end; { Case }
  end;

end;



// Ядро берется по центру
procedure FiltrFIR_Center(var y, x: TArrayReal; b: TArrayReal);
var
  i, j, r: integer;
  S: Real;
begin
  SetLength(y, Length(x));
  r := Length(b) div 2;
  for i := 0 to Length(x) - 1 do
  begin
    S := 0;
    for j := 0 to 2 * r do
      if (i + j - r >= 0) and (i + j - r < Length(x)) then
        S := S + x[i + j - r] * b[j];
    y[i] := S;
  end;
end;

// Рассчет коэфициентов Гаусовского фильтра для реализации через КИХ фильтр
procedure GausianFIR(var A: TArrayReal; Sigma: Real);
var
  i, r: integer;
  S: Real;
begin

  S := 0;
  r := round(Sigma * 3 * sqrt(2 * Pi) / 4);
  SetLength(A, 2 * r + 1);

  for i := 0 to Length(A) - 1 do
  begin
    A[i] := 1 / (sqrt(2 * Pi) * Sigma) * Exp(-sqr(i - r) / (2 * Sigma * Sigma));
    S := S + A[i];
  end;

  for i := 0 to Length(A) - 1 do
    A[i] := A[i] / S;

end;

procedure FiltrGausianFIR(var y, x: TArrayReal; Sigma: Real);
var
  b: TArrayReal;
begin
  GausianFIR(b, Sigma);
  FiltrFIR_Center(y, x, b);
end;

{$ENDREGION}

{$REGION 'TWavData'}

procedure TWavData.ReadWave;
var
  MemoryStream: TMemoryStream;
  i, j: Integer;
  b: Byte;
  w: SmallInt;
  l: Integer;
begin

  MemoryStream := TMemoryStream.Create;
  MemoryStream.LoadFromFile(FFileName);

  MemoryStream.Read(FHead, SizeOf(FHead));
  SetLength(FCanals, FHead.wChannels);

  for j := 0 to FHead.wChannels - 1 do
  begin
    SetLength(FCanals[j], ((FHead.DataSize div FHead.wChannels) * 8)
      div FHead.wBitsPerSample);
  end;

  if FHead.wBitsPerSample = 8 then
  begin
    for i := 0 to Length(FCanals[0]) - 1 do
      for j := 0 to Length(FCanals) - 1 do
      begin
        MemoryStream.Read(b, SizeOf(b));
        FCanals[j][i] := b;
      end;
  end;

  if FHead.wBitsPerSample = 16 then
  begin
    for i := 0 to Length(FCanals[0]) - 1 do
      for j := 0 to Length(FCanals) - 1 do
      begin
        MemoryStream.Read(w, SizeOf(w));
        FCanals[j][i] := w;
      end;
  end;

  if FHead.wBitsPerSample = 32 then
  begin
    for i := 0 to Length(FCanals[0]) - 1 do
      for j := 0 to Length(FCanals) - 1 do
      begin
        MemoryStream.Read(l, SizeOf(l));
        FCanals[j][i] := l;
      end;
  end;

  MemoryStream.Free;

end;

procedure TWavData.GetMaxMin(var DisplayedData: TDisplayedData; NewLength: integer;
  InterpolationMode: integer = 0);
var
  OldLength: integer;
  FactorSize: Real;
  MaxS, MinS: integer;
  Max, Min: TArrayInt;
  dT, t: Real;
  i, j: integer;
begin
  OldLength := Length(FCanals);

  if OldLength = 0 then
    exit;

  FactorSize := (NewLength - 1) / (OldLength - 1);
  SetLength(Max, NewLength);
  SetLength(Min, NewLength);

  if FactorSize < 1 then { Уменьшаем }
  begin
    { Метод подсчёта среднего по n=NewLength/NewLength }
    { На крае при подсчёте среднего используется линейное интерполирование }
    dT := FactorSize;
    MaxS := FData[0];
    MinS := FData[0];
    t := 0;
    j := 0;
    i := 0;
    While i <= OldLength do
    begin
      if t + dT > 1 then
      begin
        Max[j] := MaxS;
        Min[j] := MinS;
        t := t + dT - 1;
        if (FData[i] > MaxS) then
        begin
          MinS := MaxS;
          MaxS := FData[i];
        end
        else if (FData[i] < MinS) then
        begin
          MaxS := MinS;
          MinS := FData[i];
        end
        else
        begin
          MaxS := FData[i];
          MinS := FData[i];
        end;
        Inc(j);
      end
      else
      begin
        if FData[i] > MaxS then
          MaxS := FData[i];
        if FData[i] < MinS then
          MinS := FData[i];
        t := t + dT;
      end;
      Inc(i);
    end;
  end
  else { FactorSize>1 } { Увеличиваем }
  begin
    ReSizeArray(Max, FData, NewLength, InterpolationMode);
    Min[0] := Max[0];
    for i := 1 to NewLength - 1 do
      Min[i] := Max[i - 1];
    for i := 1 to NewLength - 1 do
      if Min[i] > Max[i] then
      begin
        MaxS := Max[i];
        Max[i] := Min[i];
        Min[i] := MaxS;
      end;
  end;

  DisplayedData.Max := Max;
  DisplayedData.Min := Min;
end;

constructor TWavData.Create;
begin
  inherited;

  FFileOpened := false;
end;

destructor TWavData.Destroy;
begin
  inherited;

  Finalize(FData);
  Finalize(FCanals);
end;

procedure TWavData.OpenFile(AFileName: String);
var
  i: integer;
  C: TArrayReal;
  S: DWord;
begin

  FFileName := AFileName;

  ReadWave;
  FSamplesCount := Length(FCanals[0]);

  for i := 0 to FSamplesCount - 1 do
    FCanals[0][i] := abs(FCanals[0][i]);

  FiltrGausianFIR(C, FCanals[0], 50);
  SetLength(FData, FSamplesCount);

  for i := 0 to FSamplesCount - 1 do
  begin
    FData[i] := round(C[i]);
  end;

  FFileOpened := True;

end;

{$ENDREGION}

end.
