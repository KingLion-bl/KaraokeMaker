unit SongTextEditor;

interface

uses
  System.SysUtils, System.Classes, Vcl.Controls, Vcl.StdCtrls, Vcl.ComCtrls,
  WinApi.Messages, System.Types, WinApi.Windows, RichEdit, Graphics, RegExpr,
  Generics.Collections;

type
  //---------------------------------------------------------------------
  TMyTextAttributes = class(TTextAttributes)
  private
    RichEdit: TCustomRichEdit;
    FType: TAttributeType;

    procedure GetAttributes(var Format: TCharFormat2);
    function GetBGColor: TColor;

    procedure SetAttributes(var Format: TCharFormat2);
    procedure SetBGColor(Value: TColor);

  public
    constructor Create(AOwner: TCustomRichEdit; AttributeType: TAttributeType);

    property BGColor: TColor read GetBGColor write SetBGColor;
  end;

  TTextItem = record
    First, Last : integer;
  end;

  //---------------------------------------------------------------------
  TSongTextEditor = class(TRichEdit)
  private
    RegEx: TRegExpr;
    MarkedTextItems: TList<TTextItem>;

    FSelAttributes: TMyTextAttributes;
    FDefAttributes: TMyTextAttributes;

    procedure SetDefAttributes(Value: TMyTextAttributes);
    procedure SetSelAttributes(Value: TMyTextAttributes);
  protected
    procedure Change; override;

  public

    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    property DefAttributes: TMyTextAttributes read FDefAttributes write SetDefAttributes;
    property SelAttributes: TMyTextAttributes read FSelAttributes write SetSelAttributes;
  published

  end;

procedure Register;

implementation

uses
  Winapi.CommDlg;


constructor TMyTextAttributes.Create(AOwner: TCustomRichEdit; AttributeType: TAttributeType);
begin
  inherited Create(AOwner, AttributeType);
  RichEdit := AOwner;
  FType := AttributeType;
end;

procedure TMyTextAttributes.GetAttributes(var Format: TCharFormat2);
begin
  InitFormat(Format);
  if RichEdit.HandleAllocated then
    SendGetStructMessage(RichEdit.Handle, EM_GETCHARFORMAT,
      WPARAM(FType = atSelected), Format, True);
end;

function TMyTextAttributes.GetBGColor: TColor;
var
  Format: TCharFormat2;
begin
  GetAttributes(Format);
  with Format do
    if (dwEffects and CFE_AUTOCOLOR) <> 0 then
      Result := clWindow else
      Result := crBackColor;
end;

procedure TMyTextAttributes.SetAttributes(var Format: TCharFormat2);
var
  Flag: Longint;
begin
  if FType = atSelected then Flag := SCF_SELECTION
  else Flag := 0;
  if RichEdit.HandleAllocated then
    SendStructMessage(RichEdit.Handle, EM_SETCHARFORMAT, Flag, Format);
end;

procedure TMyTextAttributes.SetBGColor(Value: TColor);
var
  Format: TCharFormat2;
begin
  InitFormat(Format);
  with Format do
  begin
    dwMask := CFM_BACKCOLOR;
    if Value = clWindow then
      dwEffects := CFE_AUTOCOLOR else
      crBackColor := ColorToRGB(Value);
  end;
  SetAttributes(Format);
end;


//-----------------------------------------------------------------------------
constructor TSongTextEditor.Create(AOwner: TComponent);
var
  DC: HDC;
begin
  inherited Create(AOwner);

  FSelAttributes := TMyTextAttributes.Create(Self, atSelected);
  FDefAttributes := TMyTextAttributes.Create(Self, atDefaultText);

  RegEx := TRegExpr.Create;
  RegEx.ModifierM := True;
  RegEx.ModifierI := True;
  RegEx.ModifierG := True;
  RegEx.Expression := '^(\[\d+:\d+:\d+\])';

  MarkedTextItems := TList<TTextItem>.Create;
end;

destructor TSongTextEditor.Destroy;
begin
  RegEx.Free;

  inherited Destroy;
end;

procedure TSongTextEditor.SetDefAttributes(Value: TMyTextAttributes);
begin
  DefAttributes.Assign(Value);
end;

procedure TSongTextEditor.SetSelAttributes(Value: TMyTextAttributes);
begin
  SelAttributes.Assign(Value);
end;

procedure TSongTextEditor.Change;
var CurPos, i : Integer;
    ValText: String;
    FullRepaintNeeded: Boolean;
    PreviusD, NextD: Integer;
    TextLen: Integer;
    TextItem: TTextItem;

    Find: TFindText;
    GetTextLengthEx: TGetTextLengthEx;

    TemplateBegin, TemplateLength, TemplateEnd: Integer;
    TemplateIsMarked, TemplateChanged: Boolean;
    TemplateIndex: Integer;


begin
  inherited Change;

  CurPos:= SelStart;

  Find.lpstrText := #$D;
  Find.chrg.cpMin := CurPos;

  // Получаем начало текущего абзаца
  Find.chrg.cpMax := 0;
  PreviusD := SendStructMessage(Handle, EM_FINDTEXT, 0, Find);

  // Получаем конец текущего абзаца
  Find.chrg.cpMax := -1;
  NextD := SendStructMessage(Handle, EM_FINDTEXT, FR_DOWN, Find);

  // Коррекция начала текущего выделения
  if PreviusD = -1 then
    SelStart := 1
  else
    SelStart := PreviusD + 1;

  // Приводим текст к Линукс формату (RegEx только в этом случае работает корректно)
  ValText := Text;
  ValText := ValText.Replace(#$D#$A, #$D, [rfReplaceAll]);
  ValText := Copy(ValText, SelStart, NextD - SelStart + 1);

  // Поиск вхождений шаблона с начала текущего абзаца
  RegEx.InputString := ValText;


  // Проверяем место вставки символа, если в выделенное поле, то
  // обновляем выделение абзаца
//  TemplateChanged := false;
//
//  for i := 0 to MarkedTextItems.Count - 1 do
//    if (MarkedTextItems[i].First >= CurPos) and (CurPos <= MarkedTextItems[i].Last) then
//    begin
//      TemplateChanged := True;
//      MarkedTextItems.Delete(i);
//
//      // Снимаем выделение с текущего абзаца целиком
//      SelStart := PreviusD;
//      SelLength := NextD - PreviusD;
//      SelAttributes.BGColor := clWhite;
//    end;


  // Снимаем выделение с остальной части текста абзаца
  SelStart := SelStart; //+ SelLength;
  SelLength := NextD - SelStart;
  SelAttributes.BGColor := clWhite;

  // Ищем шаблоны в тексте
  if RegEx.Exec() then
  repeat
//    TemplateBegin := RegEx.MatchPos[1];
//    TemplateLength := RegEx.MatchLen[1];
//    TemplateEnd := TemplateBegin + TemplateLength - 1;

//    TemplateIsMarked := false;

    // Проверяем место вставки символа, если в выделенное поле, то
    // обновляем выделение абзаца
//    for i := 0 to MarkedTextItems.Count - 1 do
//      if (MarkedTextItems[i].First = TemplateBegin) and (MarkedTextItems[i].Last = TemplateEnd) then
//      begin
//        TemplateIsMarked := True;
//        TemplateIndex := i;
//      end;

//    if TemplateChanged or not(TemplateIsMarked) then
//    begin


      // Выделение шаблона
      SelStart := SelStart + RegEx.MatchPos[1] - 2;
      SelLength := RegEx.MatchLen[1];
      SelAttributes.BGColor := clGreen;

      // Помещаем данные об элементе выделения в список
//      TextItem.First := PreviusD + SelStart;
//      TextItem.Last := PreviusD + SelStart + SelLength - 1;
//      MarkedTextItems.Add(TextItem);


//    end;

  until not RegEx.ExecNext;


  GetTextLengthEx.flags := GTL_DEFAULT;
  GetTextLengthEx.codepage := 1200;
  TextLen := SendMessage(Handle, EM_GETTEXTLENGTHEX, WPARAM(@GetTextLengthEx), 0);

//  SelLength := TextLen - SelStart;

  SelStart := CurPos;
  SelLength := 0;
  SelAttributes.BGColor := clWhite;

end;

//-----------------------------------------------------------------------------
procedure Register;
begin
  RegisterComponents('WaveScreen', [TSongTextEditor]);
end;

end.
